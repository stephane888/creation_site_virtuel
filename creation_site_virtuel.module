<?php
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Field\FieldStorageDefinitionInterface;

/**
 *
 * @file
 * Primary module hooks for Creation site virtuel module.
 *
 * @DCG
 * This file is no longer required in Drupal 8.
 * @see https://www.drupal.org/node/2217931
 */

/**
 * implement hook_entity_base_field_info
 *
 * @param EntityTypeInterface $entity_type
 */
function creation_site_virtuel_entity_base_field_info(EntityTypeInterface $entity_type) {
  $fields = [];
  if ($entity_type->id() == 'site_internet_entity') {
    if (\Drupal::moduleHandler()->moduleExists('domain')) {
      __creation_site_virtuel_fields_domain($fields);
    }
  }
  elseif ($entity_type->id() == 'paragraph') {
    if (\Drupal::moduleHandler()->moduleExists('domain')) {
      __creation_site_virtuel_fields_domain($fields);
    }
  }
  elseif ($entity_type->id() == 'block_content') {
    $fields['layout_paragraphs'] = BaseFieldDefinition::create('entity_reference')->setLabel(t(' Sections '))->setCardinality(FieldStorageDefinitionInterface::CARDINALITY_UNLIMITED)->setDisplayOptions('form', [
      'type' => 'creationsitevirtuelcomplexinline',
      'weight' => 0
    ])->setDisplayConfigurable('form', TRUE)->setDisplayConfigurable('view', TRUE)->setSetting('target_type', 'paragraph')->setSetting('handler', 'default')->setTranslatable(false)->setSetting('allow_duplicate', true);
    $fields['user_id'] = BaseFieldDefinition::create('entity_reference')->setLabel(t(' User Name '))->setRequired(TRUE)->setDescription(t('The Name of the associated user.'))->setSetting('target_type', 'user')->setSetting('handler', 'default')->setDisplayOptions('view', array(
      'label' => 'above',
      'type' => 'entity_reference_label',
      'weight' => -3
    ))->setDisplayOptions('form', [
      'type' => 'entity_reference_autocomplete',
      'settings' => array(
        'match_operator' => 'CONTAINS',
        'size' => 60,
        'autocomplete_type' => 'tags',
        'placeholder' => ''
      ),
      'weight' => -3
    ])->setDisplayConfigurable('form', TRUE)->setDisplayConfigurable('view', TRUE)->setDefaultValueCallback('\Drupal\creation_site_virtuel\CreationSiteVirtuel::getCurrentUser');
    __creation_site_virtuel_fields_domain($fields);
  }
  elseif ($entity_type->id() == 'commerce_product') {
    $fields['layout_paragraphs'] = BaseFieldDefinition::create('entity_reference')->setLabel(t(' Sections '))->setCardinality(FieldStorageDefinitionInterface::CARDINALITY_UNLIMITED)->setDisplayOptions('form', [
      'type' => 'creationsitevirtuelcomplexinline',
      'weight' => 39
    ])->setDisplayConfigurable('form', TRUE)->setDisplayConfigurable('view', TRUE)->setSetting('target_type', 'paragraph')->setSetting('handler', 'default')->setTranslatable(false)->setSetting('allow_duplicate', true);
    __creation_site_virtuel_fields_domain($fields);
  }
  // on ajoute un champs à tous les types de nodes pour l'affichage des
  // données de paragraphs
  // elseif ($entity_type->id() == 'node') {
  // $fields['layout_paragraphs'] =
  // BaseFieldDefinition::create('entity_reference')->setLabel(t(' Sections
  // '))->setCardinality(FieldStorageDefinitionInterface::CARDINALITY_UNLIMITED)->setDisplayOptions('form',
  // [
  // 'type' => 'creationsitevirtuelcomplexinline',
  // 'weight' => 10
  // ])->setDisplayConfigurable('form', TRUE)->setDisplayConfigurable('view',
  // TRUE)->setSetting('target_type', 'paragraph')->setSetting('handler',
  // 'default')->setTranslatable(false)->setSetting('allow_duplicate', true);
  // }
  return $fields;
}

/**
 *
 * @param array $fields
 */
function __creation_site_virtuel_fields_domain(array &$fields) {
  $field_access = \Drupal\domain_access\DomainAccessManagerInterface::DOMAIN_ACCESS_FIELD;
  $field_source = \Drupal\domain_source\DomainSourceElementManagerInterface::DOMAIN_SOURCE_FIELD;
  //
  $fields[$field_access] = BaseFieldDefinition::create('entity_reference')->setLabel(t(" Domain access "))->setCardinality(FieldStorageDefinitionInterface::CARDINALITY_UNLIMITED)->setDisplayOptions('form', [
    'type' => 'select2_entity_reference',
    'weight' => 40,
    'settings' => [
      'autocomplete' => true
    ]
  ])->setSetting('handler', 'default')->setSetting('target_type', 'domain')->setDisplayConfigurable('form', TRUE)->setDisplayConfigurable('view', TRUE)->setDefaultValueCallback('\Drupal\creation_site_virtuel\CreationSiteVirtuel::getActiveDomain');
  //
  $fields[$field_source] = BaseFieldDefinition::create('entity_reference')->setLabel(t(" Domain source "))->setDisplayOptions('form', [
    'type' => 'options_select',
    'weight' => 40
  ])->setSetting('handler', 'default')->setSetting('target_type', 'domain')->setDisplayConfigurable('form', TRUE)->setDisplayConfigurable('view', TRUE);
}

/**
 * Implements hook_theme().
 */
function creation_site_virtuel_theme() {
  $theme = [];
  $theme['site_internet_entity'] = [
    'render element' => 'elements',
    'file' => 'site_internet_entity.page.inc',
    'template' => 'site_internet_entity'
  ];
  $theme['site_internet_entity_content_add_list'] = [
    'render element' => 'content',
    'variables' => [
      'content' => NULL
    ],
    'file' => 'site_internet_entity.page.inc'
  ];
  return $theme;
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function creation_site_virtuel_theme_suggestions_site_internet_entity(array $variables) {
  $suggestions = [];
  $entity = $variables['elements']['#site_internet_entity'];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');
  
  $suggestions[] = 'site_internet_entity__' . $sanitized_view_mode;
  $suggestions[] = 'site_internet_entity__' . $entity->bundle();
  $suggestions[] = 'site_internet_entity__' . $entity->bundle() . '__' . $sanitized_view_mode;
  $suggestions[] = 'site_internet_entity__' . $entity->id();
  $suggestions[] = 'site_internet_entity__' . $entity->id() . '__' . $sanitized_view_mode;
  return $suggestions;
}

/**
 * Implement hook_field_widget_form_alter
 *
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 */
function creation_site_virtuel_field_widget_form_alter(&$element, \Drupal\Core\Form\FormStateInterface $form_state, $context) {
  // dump($element);
}

/**
 * implement hook_field_widget_multivalue_WIDGET_TYPE_form_alter
 */
// function
// creation_site_virtuel_field_widget_multivalue_creationsitevirtuelcomplexinline_form_alter(&$element,
// \Drupal\Core\Form\FormStateInterface $form_state, $context) {
// dump($element);
// }
function creation_site_virtuel_field_widget_creationsitevirtuelcomplexinline_form_alter(&$element, \Drupal\Core\Form\FormStateInterface $form_state, $context) {
  /**
   *
   * @var \Drupal\Core\Field\FieldItemListInterface $items
   */
  $items = $context['items'];
  
  // On n'essaie de faire des copie de contenus.
  if ($items->getEntity()->isNew()) {
    
    /**
     *
     * @var \Drupal\creation_site_virtuel\Plugin\Field\FieldWidget\CreationSiteVirtuelComplexInline $widget
     */
    $widget = $context['widget'];
    $ief_id = $widget->_getIefId();
    $entities = $form_state->get([
      'inline_entity_form',
      $ief_id,
      'entities'
    ]);
    
    // uniquement lors de la creation d'un contenu, on duplique les contenus
    // definies par defaut.
    if (!$form_state->get('default_value_widget')) {
      
      if (!empty($entities)) {
        // on met à jour les données present dans $form_state.
        foreach ($entities as $k => $entity) {
          /**
           *
           * @var \Drupal\node\Entity\Node $entity
           */
          $cloneNode = $entity['entity']->createDuplicate();
          $entities[$k]['needs_save'] = true;
          $entities[$k]['form'] = null;
          $entities[$k]['entity'] = $cloneNode;
        }
        //
        $form_state->set([
          'inline_entity_form',
          $ief_id,
          'entities'
        ], $entities);
        // On met à jour les données present dans le bloc d'affichage.
        foreach ($element['entities'] as $k => $entity) {
          if (!empty($entity['#entity'])) {
            /**
             *
             * @var \Drupal\node\Entity\Node $node
             */
            $node = $element['entities'][$k]['#entity'];
            $element['entities'][$k]['#entity'] = $node->createDuplicate();
            $element['entities'][$k]['#needs_save'] = true;
          }
        }
      }
      else {
        $message = "Aucun contenu par defaut pour le champs : " . $items->getName();
        \Drupal::messenger()->addStatus($message);
      }
    }
    // $form_values = NestedArray::getValue($form_state->getValues(),
    // $reference_form['#parents']);
  }
  else {
    // $widget = $context['widget'];
    // $ief_id = $widget->_getIefId();
    // $entities = $form_state->get([
    // 'inline_entity_form',
    // $ief_id,
    // 'entities'
    // ]);
    // // dump($entities);
    // foreach ($entities as $vals) {
    // foreach ($vals as $entity) {
    // /**
    // *
    // * @var \Drupal\block_content\Entity\BlockContent $entity
    // */
    // if ($entity instanceof Drupal\block_content\Entity\BlockContent &&
    // $entity->getEntityTypeId() == 'block_content') {
    // dump($entity->get('field_domain_access')->getValue());
    // }
    // }
    // }
  }
}

